/* Auto-generated by: https://github.com/pmndrs/gltfjsx */
import React, { useRef, useMemo } from 'react'
import { useGLTF, MeshTransmissionMaterial } from '@react-three/drei'
import type { ThreeElements } from '@react-three/fiber'
import type { GLTF } from 'three-stdlib'
import * as THREE from 'three'

type Props = ThreeElements['group']
type ModelProps = Props & {
    gradient?: {
        color1?: THREE.ColorRepresentation;
        color2?: THREE.ColorRepresentation;
        color3?: THREE.ColorRepresentation;
        metalness?: number;
        roughness?: number;
    }
    index?: number;
}

type GLTFResult = GLTF & {
    nodes: {
        genie_body_1: THREE.Mesh
        Cyclops_Glasses_BezierCurve002: THREE.Mesh
        Cyclops_Glasses_BezierCurve002_1: THREE.Mesh
        belt_1: THREE.Mesh & { material: THREE.Material }
        goggle_outer_frame_1: THREE.Mesh
        cap_2: THREE.Mesh
        goggle_outer_frame_2: THREE.Mesh
        goggle_outer_glass_2: THREE.Mesh
        belt_3: THREE.Mesh & { material: THREE.Material }
        goggle_left_mota_belt: THREE.Mesh
        goggle_outer_glass: THREE.Mesh
        goggle_inner_glass: THREE.Mesh
        goggle_right_mota_belt: THREE.Mesh
    }
    materials: {
        Material_0: THREE.Material
        frame: THREE.Material
        glass: THREE.Material
        Material: THREE.Material
        Background: THREE.Material
        Lense: THREE.Material
        '02___Default': THREE.Material
        '03___Default': THREE.Material
        '02___Default.001': THREE.Material
    }
}

export function GenieGo(props: ModelProps) {
    const { nodes, materials } = useGLTF('/assets/models/genie_go.gltf') as unknown as GLTFResult
    const { gradient, index = 0, ...groupProps } = props

    // Optimized materials for better performance
    const glassFrame = useMemo(() => new THREE.MeshStandardMaterial({
        color: "#000",
        metalness: 0.2,
        roughness: 0.5
    }), [])

    const beltMaterial = useMemo(() => new THREE.MeshStandardMaterial({
        color: "#333446",
        metalness: 0.2,
        roughness: 0.5
    }), [])

    const beltMesh = useMemo(() => {
        const cloned = nodes.belt_1.clone()
        cloned.material = beltMaterial
        return cloned
    }, [nodes.belt_1, beltMaterial])

    const belt3Mesh = useMemo(() => {
        const cloned = nodes.belt_3.clone()
        cloned.material = beltMaterial
        return cloned
    }, [nodes.belt_3, beltMaterial])

    // Material props for transmission material
    const materialProps = useMemo(() => ({
        thickness: 0.2,
        roughness: 0,
        transmission: 1,
        ior: 1.2,
        chromaticAberration: 0.02,
        backSide: true
    }), [])


    // Clone your mesh and assign the new material

    // 3rd model 

    const outerGlass = useMemo(
        () =>
            new THREE.MeshStandardMaterial({
                color: "#fff",
                metalness: 0.8,
                roughness: 0,
                emissive: new THREE.Color('#fff'),
                emissiveIntensity: 1.2,
            }),
        []
    );

    const outerGlassMeterial = useMemo(() => {
        const cloned = nodes.goggle_outer_glass.clone();
        cloned.material = outerGlass;
        return cloned;
    }, [nodes.goggle_outer_glass, outerGlass]);


    //

    const innerGlass = useMemo(() => new THREE.MeshStandardMaterial({
        color: "#333446",
        metalness: 0.5,
        roughness: .5
    }), []);

    const innerGlassMeterial = useMemo(() => {
        const cloned = nodes.goggle_inner_glass.clone();
        cloned.material = innerGlass;
        return cloned;
    }, [nodes.goggle_inner_glass, innerGlass]);

    //

    const leftMotaBelt = useMemo(() => new THREE.MeshStandardMaterial({
        color: "#333446",
        metalness: 0.5,
        roughness: .5
    }), []);

    const leftMotaBeltMeterial = useMemo(() => {
        const cloned = nodes.goggle_left_mota_belt.clone();
        cloned.material = leftMotaBelt;
        return cloned;
    }, [nodes.goggle_left_mota_belt, leftMotaBelt]);


    //

    const rightMotaBelt = useMemo(() => new THREE.MeshStandardMaterial({
        color: "#333446",
        metalness: 0.4,
        roughness: .5
    }), []);

    const rightMotaBeltMeterial = useMemo(() => {
        const cloned = nodes.goggle_right_mota_belt.clone();
        cloned.material = rightMotaBelt;
        return cloned;
    }, [nodes.goggle_right_mota_belt, rightMotaBelt]);

    //

    const belt = useMemo(() => new THREE.MeshStandardMaterial({
        color: "#333446",
        metalness: 0.5,
        roughness: .5
    }), []);

    const beltMeterial = useMemo(() => {
        const cloned = nodes.belt_3.clone();
        cloned.material = belt;
        return cloned;
    }, [nodes.belt_3, belt]);



    return (
        <group {...groupProps} dispose={null} userData={{ tag: "genie" }}>
            {/* Common body for all indices */}
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.genie_body_1.geometry}
                material={materials.Material_0}
            >
                <MeshTransmissionMaterial {...materialProps} />
            </mesh>

            {/* Index 0: Cyclops glasses and goggle_outer_frame_1 */}
            {index === 0 && (
                <>
                    <group position={[-0.004, 0.172, 0.121]} rotation={[Math.PI / 2, 0, 1.636]} scale={0.93}>
                        <mesh
                            castShadow
                            receiveShadow
                            geometry={nodes.Cyclops_Glasses_BezierCurve002.geometry}
                            material={glassFrame}
                        />
                        <mesh
                            castShadow
                            receiveShadow
                            geometry={nodes.Cyclops_Glasses_BezierCurve002_1.geometry}
                            material={glassFrame}
                        />
                    </group>

                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes.goggle_outer_frame_1.geometry}
                        material={materials.glass}
                        position={[-0.004, 0.172, 0.121]}
                        rotation={[Math.PI / 2, 0, 1.636]}
                        scale={0.93}
                    >
                        <meshStandardMaterial
                            color="#00FFDE"
                            emissive="#FFF7D1"
                            emissiveIntensity={1.5}
                            metalness={0.6}
                            roughness={0.2}
                        />
                    </mesh>

                    <primitive object={beltMesh} />
                </>
            )}

            {/* Index 1: Cap and goggle_outer_frame_2, goggle_outer_glass_2 */}
            {index === 1 && (
                <>

                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes.goggle_outer_frame_2.geometry}
                        material={materials.Background}
                        position={[0, 0.123, 0.139]}
                        rotation={[Math.PI / 2, 0, 0]}
                        scale={1.695}
                    />

                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes.goggle_outer_glass_2.geometry}
                        material={materials.Lense}
                        position={[0, 0.123, 0.139]}
                        rotation={[Math.PI / 2, 0, 0]}
                        scale={1.695}
                    >
                        <meshStandardMaterial
                            color="#00FFDE"
                            emissive="#FFF7D1"
                            emissiveIntensity={2}
                            metalness={0.8}
                            roughness={0.1}
                        />
                    </mesh>

                   
                </>
            )}

            {/* Index 2: Goggle accessories */}
            {index === 2 && (
                <>
                    <primitive object={leftMotaBeltMeterial} />
                    <primitive object={rightMotaBeltMeterial} />
                    <primitive object={outerGlassMeterial} />
                    <primitive object={innerGlassMeterial} />
                    <primitive object={belt3Mesh} />
                </>
            )}
        </group>
    )
}

export const Model = GenieGo

useGLTF.preload('/assets/models/genie_go.gltf')
